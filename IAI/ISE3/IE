def is_valid(board, row, col, num):
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False
        if board[3*(row//3) + i//3][3*(col//3) + i%3] == num:
            return False
    return True

def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j
    return None

def get_possible_values(board, row, col):
    return [num for num in range(1, 10) if is_valid(board, row, col, num)]

def suggest_next_move(board):
    min_options = 10
    best_move = None
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                options = get_possible_values(board, i, j)
                if len(options) < min_options:
                    min_options = len(options)
                    best_move = (i, j, options)
    return best_move

def print_board(board):
    for row in board:
        print(" ".join(str(num) if num != 0 else "." for num in row))

# Sample board (0 = empty cell)
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

while True:
    print_board(board)
    move = suggest_next_move(board)
    if move:
        row, col, options = move
        print(f"\nSuggested move: Cell ({row+1}, {col+1}) => Options: {options}")
        val = int(input("Enter a value (or 0 to exit): "))
        if val == 0:
            break
        if val in options:
            board[row][col] = val
        else:
            print("Invalid move. Try again.")
    else:
        print("\nPuzzle Solved!")
        break
